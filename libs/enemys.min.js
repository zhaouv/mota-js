function enemys(){this.init()}enemys.prototype.init=function(){this.enemys=enemys_fcae963b_31c9_42b4_b48c_bb48d09f3f80};enemys.prototype.getEnemys=function(a){if(!core.isset(a)){return this.enemys}return this.enemys[a]};enemys.prototype.hasSpecial=function(a,b){if(a instanceof Array){return a.indexOf(b)>=0}if(typeof a=="number"){return a!=0&&(a%100==b||this.hasSpecial(parseInt(a/100),b))}return false};enemys.prototype.getSpecialText=function(b){if(b==undefined){return""}var a=this.enemys[b];var c=a.special;var d=[];if(this.hasSpecial(c,1)){d.push("先攻")}if(this.hasSpecial(c,2)){d.push("魔攻")}if(this.hasSpecial(c,3)){d.push("坚固")}if(this.hasSpecial(c,4)){d.push("2连击")}if(this.hasSpecial(c,5)){d.push("3连击")}if(this.hasSpecial(c,6)){d.push((a.n||4)+"连击")}if(this.hasSpecial(c,7)){d.push("破甲")}if(this.hasSpecial(c,8)){d.push("反击")}if(this.hasSpecial(c,9)){d.push("净化")}if(this.hasSpecial(c,10)){d.push("模仿")}if(this.hasSpecial(c,11)){d.push("吸血")}if(this.hasSpecial(c,12)){d.push("中毒")}if(this.hasSpecial(c,13)){d.push("衰弱")}if(this.hasSpecial(c,14)){d.push("诅咒")}if(this.hasSpecial(c,15)){d.push("领域")}if(this.hasSpecial(c,16)){d.push("夹击")}if(this.hasSpecial(c,17)){d.push("仇恨")}if(this.hasSpecial(c,18)){d.push("阻击")}if(this.hasSpecial(c,19)){d.push("自爆")}if(this.hasSpecial(c,20)){d.push("无敌")}if(this.hasSpecial(c,21)){d.push("退化")}if(this.hasSpecial(c,22)){d.push("固伤")}if(this.hasSpecial(c,23)){d.push("重生")}return d};enemys.prototype.getSpecialHint=function(a,e){if(!core.isset(e)){var c=[];for(var d=1;d<100;d++){if(this.hasSpecial(a.special,d)){var b=this.getSpecialHint(a,d);if(b!=""){c.push(b)}}}return c}switch(e){case 1:return"先攻：怪物首先攻击";case 2:return"魔攻：怪物无视勇士的防御";case 3:return"坚固：勇士每回合最多只能对怪物造成1点伤害";case 4:return"2连击：怪物每回合攻击2次";case 5:return"3连击：怪物每回合攻击3次";case 6:return(a.n||4)+"连击： 怪物每回合攻击"+(a.n||4)+"次";case 7:return"破甲：战斗前，怪物附加角色防御的"+parseInt(100*core.values.breakArmor)+"%作为伤害";case 8:return"反击：战斗时，怪物每回合附加角色攻击的"+parseInt(100*core.values.counterAttack)+"%作为伤害，无视角色防御";case 9:return"净化：战斗前，怪物附加勇士魔防的"+core.values.purify+"倍作为伤害";case 10:return"模仿：怪物的攻防和勇士攻防相等";case 11:return"吸血：战斗前，怪物首先吸取角色的"+parseInt(100*a.value)+"%生命作为伤害"+(a.add?"，并把伤害数值加到自身生命上":"");case 12:return"中毒：战斗后，勇士陷入中毒状态，每一步损失生命"+core.values.poisonDamage+"点";case 13:return"衰弱：战斗后，勇士陷入衰弱状态，攻防暂时下降"+core.values.weakValue+"点";case 14:return"诅咒：战斗后，勇士陷入诅咒状态，战斗无法获得金币和经验";case 15:return"领域：经过怪物周围"+(a.range||1)+"格时自动减生命"+(a.value||0)+"点";case 16:return"夹击：经过两只相同的怪物中间，勇士生命值变成一半";case 17:return"仇恨：战斗前，怪物附加之前积累的仇恨值作为伤害"+(core.flags.hatredDecrease?"；战斗后，释放一半的仇恨值":"")+"。（每杀死一个怪物获得"+core.values.hatred+"点仇恨值）";case 18:return"阻击：经过怪物的十字领域时自动减生命"+(a.value||0)+"点，同时怪物后退一格";case 19:return"自爆：战斗后勇士的生命值变成1";case 20:return"无敌：勇士无法打败怪物，除非拥有十字架";case 21:return"退化：战斗后勇士永久下降"+(a.atkValue||0)+"点攻击和"+(a.defValue||0)+"点防御";case 22:return"固伤：战斗前，怪物对勇士造成"+(a.damage||0)+"点固定伤害，无视勇士魔防。";case 23:return"重生：怪物被击败后，角色转换楼层则怪物将再次出现";default:break}return""};enemys.prototype.getDamage=function(c){var b=core.material.enemys[c];var a=this.calDamage(b,core.status.hero.hp,core.status.hero.atk,core.status.hero.def,core.status.hero.mdef);if(a>=999999999){return a}return a+this.getExtraDamage(b)};enemys.prototype.getExtraDamage=function(b){var a=0;if(this.hasSpecial(b.special,17)){a+=core.getFlag("hatred",0)}if(this.hasSpecial(b.special,22)){a+=b.damage||0}return a};enemys.prototype.getCritical=function(e){var d=core.material.enemys[e];if(this.hasSpecial(d.special,3)||this.hasSpecial(d.special,10)){return"???"}var c=this.calDamage(d,core.status.hero.hp,core.status.hero.atk,core.status.hero.def,core.status.hero.mdef);if(c<=0){return 0}for(var b=core.status.hero.atk+1;b<=d.hp+d.def;b++){var a=this.calDamage(d,core.status.hero.hp,b,core.status.hero.def,core.status.hero.mdef);if(a<c){return b-core.status.hero.atk}c=a}return 0};enemys.prototype.getCriticalDamage=function(e){var a=this.getCritical(e);if(a=="???"){return"???"}if(a<=0){return 0}var d=core.material.enemys[e];var b=this.calDamage(d,core.status.hero.hp,core.status.hero.atk,core.status.hero.def,core.status.hero.mdef);if(b>=999999999){return"???"}return b-this.calDamage(d,core.status.hero.hp,core.status.hero.atk+a,core.status.hero.def,core.status.hero.mdef)};enemys.prototype.getDefDamage=function(b){var a=core.material.enemys[b];var d=this.calDamage(a,core.status.hero.hp,core.status.hero.atk,core.status.hero.def,core.status.hero.mdef);var c=this.calDamage(a,core.status.hero.hp,core.status.hero.atk,core.status.hero.def+1,core.status.hero.mdef);if(d>=999999999||c>=999999999){return"???"}return d-c};enemys.prototype.calDamage=function(l,e,c,d,f){var j=l.hp,h=l.atk,i=l.def,k=l.special;e=Math.max(0,e);c=Math.max(0,c);d=Math.max(0,d);f=Math.max(0,f);if(this.hasSpecial(k,20)&&!core.hasItem("cross")){return 999999999}var g=0;if(this.hasSpecial(k,11)){var o=e*l.value;o=parseInt(o);if(l.add){j+=o}g+=o}if(this.hasSpecial(k,10)){h=c;i=d}if(this.hasSpecial(k,2)){d=0}if(this.hasSpecial(k,3)&&i<c-1){i=c-1}if(c<=i){return 999999999}var m=h-d;if(m<0){m=0}if(this.hasSpecial(k,4)){m*=2}if(this.hasSpecial(k,5)){m*=3}if(this.hasSpecial(k,6)){m*=(l.n||4)}var b=0;if(this.hasSpecial(k,8)){b+=parseInt(core.values.counterAttack*c)}if(this.hasSpecial(k,1)){g+=m}if(this.hasSpecial(k,7)){g+=parseInt(core.values.breakArmor*d)}if(this.hasSpecial(k,9)){g+=parseInt(core.values.purify*f)}var n=parseInt((j-1)/(c-i));var a=g+n*m+(n+1)*b;a-=f;if(!core.flags.enableNegativeDamage){a=Math.max(0,a)}return a};enemys.prototype.getCurrentEnemys=function(d){d=d||core.status.floorId;var c=[];var l={};var e=core.status.maps[d].blocks;for(var a=0;a<e.length;a++){if(core.isset(e[a].event)&&!(core.isset(e[a].enable)&&!e[a].enable)&&e[a].event.cls.indexOf("enemy")==0){var j=e[a].event.id;if(core.isset(l[j])){continue}var i=core.material.enemys[j];var h=i.hp,f=i.atk,g=i.def;if(this.hasSpecial(i.special,10)){f=core.status.hero.atk;g=core.status.hero.def}if(this.hasSpecial(i.special,3)&&g<core.status.hero.atk-1){g=core.status.hero.atk-1}var k=core.enemys.getSpecialText(j);if(k.length>=3){k="多属性..."}else{k=k.join("  ")}c.push({id:j,name:i.name,hp:h,atk:f,def:g,money:i.money,experience:i.experience,point:i.point||0,special:k,damage:this.getDamage(j),critical:this.getCritical(j),criticalDamage:this.getCriticalDamage(j),defDamage:this.getDefDamage(j)});l[j]=true}}c.sort(function(m,n){if(m.damage==n.damage){return m.money-n.money}return m.damage-n.damage});return c};